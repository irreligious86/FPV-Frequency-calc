// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
class InterferenceCalculator {
    constructor() {
        console.log('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ===');
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.CHANNEL_WIDTH = 20;  // MHz
        this.MIN_SAFE_DISTANCE = 38;  // MHz
        
        // –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        this.selectedChannels = new Set();
        this.isSimpleMode = true;  // true = –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç, false = —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        
        // –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        this.interferenceResults = {
            simple: new Map(),  // —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            server: new Map()   // —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        };

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        this.ANALOG_THRESHOLDS = {
            none: 100,  // > 100 MHz
            low: 40,    // > 40 MHz
            medium: 20  // > 20 MHz
            // <= 20 MHz = high
        };

        this.DIGITAL_THRESHOLDS = {
            none: 80,   // > 80 MHz
            low: 30,    // > 30 MHz
            medium: 15  // > 15 MHz
            // <= 15 MHz = high
        };

        // –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
        this.calculationCache = new Map();
        console.log('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    calculateSimpleInterference(freq1, freq2) {
        const distance = Math.abs(freq1 - freq2);
        
        if (distance < this.CHANNEL_WIDTH) return {
            level: "critical",
            distance: distance,
            description: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        };
        
        if (distance < this.MIN_SAFE_DISTANCE) return {
            level: "high",
            distance: distance,
            description: "–°–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        };
        
        if (distance < 50) return {
            level: "medium",
            distance: distance,
            description: "–°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        };
        
        if (distance < 70) return {
            level: "low",
            distance: distance,
            description: "–°–ª–∞–±–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        };
        
        return {
            level: "none",
            distance: distance,
            description: "–ù–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"
        };
    }

    // –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    async calculateServerInterference(channels) {
        try {
            console.log('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
                channels: channels.map(ch => ({
                    band: ch.band,
                    channel: ch.channel,
                    range: ch.range || '5.8GHz'
                }))
            });

            const response = await fetch('/api/interference/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    channels: channels.map(ch => ({
                        band: ch.band,
                        channel: ch.channel,
                        range: ch.range || '5.8GHz'
                    }))
                })
            });
            
            if (!response.ok) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                throw new Error('Network response was not ok');
            }
            
            const data = await response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ø—Ä–æ—Å—Ç—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
            return {
                matrix: data.interference_matrix,
                analysis: data.analysis,
                criticalPairs: data.critical_pairs
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–∞—Å—á–µ—Ç—É
            this.isSimpleMode = true;
            return this.updateInterference();
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    addChannel(channel) {
        this.selectedChannels.add(channel);
        return this.updateInterference();
    }

    // –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    removeChannel(channel) {
        this.selectedChannels.delete(channel);
        return this.updateInterference();
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞
    async toggleMode() {
        this.isSimpleMode = !this.isSimpleMode;
        return this.updateInterference();
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    async updateInterference() {
        const channels = Array.from(this.selectedChannels);
        
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –º–µ–Ω—å—à–µ 2, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—é
        if (channels.length < 2) {
            this.interferenceResults.simple.clear();
            this.interferenceResults.server.clear();
            return null;
        }

        if (this.isSimpleMode) {
            // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
            const results = new Map();
            
            for (let i = 0; i < channels.length; i++) {
                for (let j = i + 1; j < channels.length; j++) {
                    const result = this.calculateSimpleInterference(
                        channels[i].frequency, 
                        channels[j].frequency
                    );
                    
                    const key = `${channels[i].id}-${channels[j].id}`;
                    results.set(key, result);
                }
            }
            
            this.interferenceResults.simple = results;
            return {
                mode: 'simple',
                results: results
            };
        } else {
            // –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            const serverResults = await this.calculateServerInterference(channels);
            this.interferenceResults.server = new Map(Object.entries(serverResults));
            return {
                mode: 'server',
                results: serverResults
            };
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    getCurrentResults() {
        return {
            mode: this.getMode(),
            results: this.isSimpleMode ? 
                this.interferenceResults.simple : 
                this.interferenceResults.server
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    getMode() {
        return this.isSimpleMode ? "simple" : "server";
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    calculateInterference(selectedChannels, unselectedChannel) {
        console.log('=== –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ===');
        console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', selectedChannels);
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∫–∞–Ω–∞–ª:', unselectedChannel);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = this._generateCacheKey(selectedChannels, unselectedChannel);
        if (this.calculationCache.has(cacheKey)) {
            console.log('–ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ');
            return this.calculationCache.get(cacheKey);
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ—Ç
        if (selectedChannels.length === 0) {
            console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return { level: 'none', details: { reason: 'no selected channels' } };
        }

        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É —á–∞—Å—Ç–æ—Ç
        let minFreqDiff = Infinity;
        let interferingChannel = null;

        selectedChannels.forEach(selected => {
            const freqDiff = Math.abs(selected.frequency - unselectedChannel.frequency);
            if (freqDiff < minFreqDiff) {
                minFreqDiff = freqDiff;
                interferingChannel = selected;
            }
        });

        console.log('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç:', minFreqDiff);
        console.log('–ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–∏—Ä—É—é—â–∏–π –∫–∞–Ω–∞–ª:', interferingChannel);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        const thresholds = unselectedChannel.isAnalog ? this.ANALOG_THRESHOLDS : this.DIGITAL_THRESHOLDS;
        let level = 'high'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è

        if (minFreqDiff > thresholds.none) {
            level = 'none';
        } else if (minFreqDiff > thresholds.low) {
            level = 'low';
        } else if (minFreqDiff > thresholds.medium) {
            level = 'medium';
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = {
            level,
            details: {
                frequencyDifference: minFreqDiff,
                interferingChannel: interferingChannel ? interferingChannel.name : null,
                isAnalog: unselectedChannel.isAnalog,
                thresholds: { ...thresholds }
            }
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.calculationCache.set(cacheKey, result);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:', result);

        return result;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    calculateBulkInterference(selectedChannels, unselectedChannels) {
        console.log('=== –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ===');
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', selectedChannels.length);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', unselectedChannels.length);

        return unselectedChannels.map(channel => {
            const result = this.calculateInterference(selectedChannels, channel);
            console.log(`–ö–∞–Ω–∞–ª ${channel.name}: —É—Ä–æ–≤–µ–Ω—å ${result.level}`);
            return result;
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        console.log('–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–∞—Å—á–µ—Ç–æ–≤');
        this.calculationCache.clear();
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞
    _generateCacheKey(selectedChannels, unselectedChannel) {
        const selectedKey = selectedChannels
            .map(ch => `${ch.frequency}`)
            .sort()
            .join('|');
        return `${selectedKey}_${unselectedChannel.frequency}`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default InterferenceCalculator;

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
let calculator = null;

export async function getInterferenceCalculator() {
    if (!calculator) {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
        calculator = new InterferenceCalculator();
    }
    return calculator;
} 
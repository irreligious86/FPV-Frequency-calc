// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ
function attachButtonHandler(button, handlerFunction) {
    button.addEventListener("click", handlerFunction);
}

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const buttons = document.querySelectorAll("button");

// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
buttons.forEach(button => {
    button.addEventListener("click", () => {
        console.log(`–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: ${button.innerText}`);
        
    });
});

document.addEventListener("DOMContentLoaded", async () => {
    const fpvDataManager = new FPVChannelData();
    await fpvDataManager.loadData();

    const modulationSelect = document.getElementById("modulationSelect");
    const bandRangeSelect = document.getElementById("bandRangeSelect");
    const bandListSelect = document.getElementById("bandListSelect");
    const channelListSelect = document.getElementById("channelListSelect");
    const getMetadataBtn = document.getElementById("getMetadataBtn");
    const findOverlapBtn = document.getElementById("findOverlapBtn"); // –ö–ù–û–ü–ö–ê
    const output = document.getElementById("output");            

    function displayOutput(data) {
        output.textContent = JSON.stringify(data, null, 2);
    }

    function clearOutput() {
        output.textContent = "";
    }

    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª—è—Ü–∏–π
    function populateModulations() {
        let modulations = fpvDataManager.getModulationTypes();
        modulationSelect.innerHTML = `<option value="">Choose...</option>`;
        modulations.forEach(mod => {
            let option = document.createElement("option");
            option.value = mod;
            option.textContent = mod;
            modulationSelect.appendChild(option);
        });
        modulationSelect.disabled = false;
    }

    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    function populateBandRanges(modulation) {
        let ranges = fpvDataManager.getBandRanges(modulation);
        bandRangeSelect.innerHTML = `<option value="">Choose...</option>`;
        ranges.forEach(range => {
            let option = document.createElement("option");
            option.value = range;
            option.textContent = range;
            bandRangeSelect.appendChild(option);
        });
        bandRangeSelect.disabled = false;
    }

    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–Ω–¥–æ–≤
    function populateBands(modulation, bandRange) {
        let bands = fpvDataManager.getBandList(modulation, bandRange);
        bandListSelect.innerHTML = `<option value="">Choose...</option>`;
        bands.forEach(band => {
            let option = document.createElement("option");
            option.value = band;
            option.textContent = band;
            bandListSelect.appendChild(option);
        });
        bandListSelect.disabled = false;
    }

    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    function populateChannels(modulation, bandRange, bandName) {
        let channels = fpvDataManager.getChannelList(modulation, bandRange, bandName);
        channelListSelect.innerHTML = `<option value="">Choose...</option>`;
        for (let channel in channels) {
            let option = document.createElement("option");
            option.value = channel;
            option.textContent = `Channel ${channel} - ${channels[channel]} MHz`;
            channelListSelect.appendChild(option);
        }
        channelListSelect.disabled = false;
    }

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è—Ü–∏–∏
    modulationSelect.addEventListener("change", () => {
        let selectedModulation = modulationSelect.value;
        if (selectedModulation) {
            populateBandRanges(selectedModulation);
            bandRangeSelect.disabled = false;
            bandListSelect.innerHTML = `<option value="">Choose...</option>`;
            bandListSelect.disabled = true;
            channelListSelect.innerHTML = `<option value="">Choose...</option>`;
            channelListSelect.disabled = true;
            getMetadataBtn.disabled = true;
        }
    });

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    bandRangeSelect.addEventListener("change", () => {
        let selectedModulation = modulationSelect.value;
        let selectedRange = bandRangeSelect.value;
        if (selectedRange) {
            populateBands(selectedModulation, selectedRange);
            bandListSelect.disabled = false;
            channelListSelect.innerHTML = `<option value="">Choose...</option>`;
            channelListSelect.disabled = true;
            getMetadataBtn.disabled = true;
        }
    });

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–µ–Ω–¥–∞
    bandListSelect.addEventListener("change", () => {
        let selectedModulation = modulationSelect.value;
        let selectedRange = bandRangeSelect.value;
        let selectedBand = bandListSelect.value;
        if (selectedBand) {
            populateChannels(selectedModulation, selectedRange, selectedBand);
            channelListSelect.disabled = false;
            getMetadataBtn.disabled = false;
        }
    });

    channelListSelect.addEventListener("change", () => {
        let selectedChannel = document.getElementById("channelListSelect").value;
        let findOverlapBtn = document.getElementById("findOverlapBtn");
    
        findOverlapBtn.disabled = !selectedChannel; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª
        console.log("–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª:", selectedChannel); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    });

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Get Metadata"
    getMetadataBtn.addEventListener("click", () => {
        let selectedModulation = modulationSelect.value;
        let selectedRange = bandRangeSelect.value;
        let selectedBand = bandListSelect.value;
        if (selectedModulation && selectedRange && selectedBand) {
            let metadata = fpvDataManager.getBandMetadata(selectedModulation, selectedRange, selectedBand);
            output.textContent = JSON.stringify(metadata, null, 2);
        }
    });

    findOverlapBtn.addEventListener("click", () => {
        let selectedModulation = modulationSelect.value;
        let selectedRange = bandRangeSelect.value;
        let selectedBand = bandListSelect.value;
        let selectedChannel = channelListSelect.value;
    
        if (selectedModulation && selectedRange && selectedBand && selectedChannel) {
            clearOutput();
    
            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –∫–∞–Ω–∞–ª–∞
            let bandData = fpvDataManager.getBandMetadata(selectedModulation, selectedRange, selectedBand);
            let channelFrequency = fpvDataManager.getChannelList(selectedModulation, selectedRange, selectedBand)[selectedChannel];
            let bandwidth = bandData.bandwidth || 20; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20 –ú–ì—Ü
    
            let selectedMin = channelFrequency - bandwidth / 2;
            let selectedMax = channelFrequency + bandwidth / 2;
    
            let criticalOverlap = [];
            let mediumOverlap = [];
            let closeNeighbor = [];
            let safeChannels = [];
    
            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ JSON
            for (let modulation in fpvDataManager.data) {
                for (let range in fpvDataManager.data[modulation]) {
                    for (let band in fpvDataManager.data[modulation][range]) {
                        let bandMeta = fpvDataManager.getBandMetadata(modulation, range, band);
                        let bandChannels = fpvDataManager.getChannelList(modulation, range, band);
                        
                        for (let channel in bandChannels) {
                            let freq = bandChannels[channel];
                            let bandWidth = bandMeta.bandwidth || 20;
    
                            let minFreq = freq - bandWidth / 2;
                            let maxFreq = freq + bandWidth / 2;

                            // ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –≤—ã–≤–æ–¥–∞
                            if (
                                modulation === selectedModulation &&
                                range === selectedRange &&
                                band === selectedBand &&
                                channel === selectedChannel
                            ) {
                                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
                            }
    
                            // üìå –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                            let overlapAmount = Math.min(selectedMax, maxFreq) - Math.max(selectedMin, minFreq);
                            let overlapPercentage = (overlapAmount / bandwidth) * 100;
    
                            // üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (10%+)
                            if (overlapPercentage >= 10) {
                                criticalOverlap.push({ modulation, range, band, channel, frequency: freq, bandwidth: bandWidth, level: "üî¥" });
                            }
                            // üü† –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö (–º–µ–Ω–µ–µ 10% –∏–ª–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–æ –¥–æ 50% —à–∏—Ä–∏–Ω—ã)
                            else if (overlapPercentage > 0 || Math.abs(channelFrequency - freq) <= bandwidth / 2) {
                                mediumOverlap.push({ modulation, range, band, channel, frequency: freq, bandwidth: bandWidth, level: "üü†" });
                            }
                            // üü° –ë–ª–∏–∑–∫–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ (–æ—Ç 50% –¥–æ 150% —à–∏—Ä–∏–Ω—ã)
                            else if (Math.abs(channelFrequency - freq) <= 1.5 * bandwidth) {
                                closeNeighbor.push({ modulation, range, band, channel, frequency: freq, bandwidth: bandWidth, level: "üü°" });
                            }
                            // üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ (–±–æ–ª–µ–µ 150% —à–∏—Ä–∏–Ω—ã)
                            else {
                                safeChannels.push({ modulation, range, band, channel, frequency: freq, bandwidth: bandWidth, level: "üü¢" });
                            }
                        }
                    }
                }
            }
    
            // üìå –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            let resultText = `üéØ Selected Channel:\nüì° ${selectedModulation} - ${selectedRange} - ${selectedBand} - CH${selectedChannel}: ${channelFrequency} MHz (BW: ${bandwidth} MHz)\n\n`;
    
            if (criticalOverlap.length > 0) {
                resultText += `üî¥ **Critical Interference (10%+ overlap):**\n`;
                resultText += criticalOverlap.map(o => `üì° ${o.modulation} - ${o.range} - ${o.band} - CH${o.channel}: ${o.frequency} MHz (BW: ${o.bandwidth} MHz)`).join("\n") + "\n\n";
            }
    
            if (mediumOverlap.length > 0) {
                resultText += `üü† **Medium Interference (<10% overlap or <50% distance):**\n`;
                resultText += mediumOverlap.map(o => `üì° ${o.modulation} - ${o.range} - ${o.band} - CH${o.channel}: ${o.frequency} MHz (BW: ${o.bandwidth} MHz)`).join("\n") + "\n\n";
            }
    
            if (closeNeighbor.length > 0) {
                resultText += `üü° **Close Neighboring Channels (50%-150% distance):**\n`;
                resultText += closeNeighbor.map(o => `üì° ${o.modulation} - ${o.range} - ${o.band} - CH${o.channel}: ${o.frequency} MHz (BW: ${o.bandwidth} MHz)`).join("\n") + "\n\n";
            }
    
            if (safeChannels.length > 0) {
                resultText += `üü¢ **Safe Channels (150%+ distance):**\n`;
                resultText += safeChannels.map(o => `üì° ${o.modulation} - ${o.range} - ${o.band} - CH${o.channel}: ${o.frequency} MHz (BW: ${o.bandwidth} MHz)`).join("\n") + "\n\n";
            }
    
            output.innerHTML = resultText;
        }
    });
    
    

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è—Ü–∏–π
    populateModulations();
});

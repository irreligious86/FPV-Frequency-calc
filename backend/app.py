import sys
import os

import os

print("FLASK_ENV:", os.getenv("FLASK_ENV"))
print("SECRET_KEY:", os.getenv("SECRET_KEY"))


# –ß–∏–Ω–∏–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤—ã–≤–æ–¥–∞, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–ª–µ–≤–∞–ª—Å—è –æ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
sys.stdout.reconfigure(encoding='utf-8')  

from flask import Flask, jsonify, request, render_template, send_from_directory
from fpv_logic.data_loader import DataLoader
from fpv_logic.interference import InterferenceAnalyzer
from backend.config import Config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


# üèóÔ∏è –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# static_folder –∏ template_folder –≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è
app = Flask(__name__, static_folder="../static", template_folder="../templates")
app.config.from_object(Config)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


# üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù —Ä–∞–∑ –∑–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–Ω–∞—á–µ –±—É–¥–µ—Ç –±–æ–ª—å)
loader = DataLoader()
data = loader.get_data()
print("üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

# ‚ö° –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –ø–æ–º–µ—Ö –Ω–∞ —á–∞—Å—Ç–æ—Ç–∞—Ö)
interference_handler = InterferenceAnalyzer(data)

@app.route("/")
def index():
    """ –û—Ç–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –≥–ª–∞–≤–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É """
    return render_template("index.html")

@app.route("/api/data", methods=["GET"])
def get_full_data():
    """ ‚ö° –û—Ç–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ —á–∞—Å—Ç–æ—Ç–∞—Ö """
    return jsonify(data)

@app.route("/api/frequency", methods=["GET"])
def get_frequency():
    """ üîç –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É, –≥—Ä—É–ø–ø–µ –∏ –Ω–æ–º–µ—Ä—É –∫–∞–Ω–∞–ª–∞ """

    band = request.args.get("band")  # –ì—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A, B, R)
    channel = request.args.get("channel")  # –ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3)
    range_name = request.args.get("range", "5.8GHz")  # –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.8GHz

    # ü§¶‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if not band or not channel:
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å band –∏ channel"}), 400

    try:
        # üì° –î–æ—Å—Ç–∞—ë–º —á–∞—Å—Ç–æ—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        frequency = data["analog"][range_name][band]["channels"].get(channel)
    except KeyError:
        # ‚ùå –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî 404 –∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ
        return jsonify({"error": "–ß–∞—Å—Ç–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    # üî• –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —á–∞—Å—Ç–æ—Ç—É –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    return jsonify({"frequency": frequency, "unit": "MHz"})

@app.route("/api/interference", methods=["GET"])
def analyze_interference():
    """ üì° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —á–∞—Å—Ç–æ—Ç –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ """

    modulation = request.args.get("modulation")  # –ê–Ω–∞–ª–æ–≥ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞
    range_name = request.args.get("range")  # –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    band = request.args.get("band")  # –ì—Ä—É–ø–ø–∞ –∫–∞–Ω–∞–ª–æ–≤
    selected_channel = request.args.get("channel")  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª

    # üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±—ã–ª –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏–Ω–∞—á–µ –∑–∞—á–µ–º —Å—é–¥–∞ –≤–æ–æ–±—â–µ –ª–µ–∑—Ç—å?
    if not modulation or not range_name or not band or not selected_channel:
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å modulation, range, band –∏ channel"}), 400

    # üî• –û—Ç–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–º–µ—Ö
    result = interference_handler.analyze_interference(modulation, range_name, band, selected_channel)
    return jsonify(result)

@app.route("/favicon.ico")
def favicon():
    """ üñºÔ∏è –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è favicon.ico, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –±–µ—Å–∏–ª 404-–æ—à–∏–±–∫–∞–º–∏ """
    return send_from_directory("../static/img", "favicon.ico", mimetype="image/x-icon")

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    app.run(debug=True)

import json
from typing import Dict, List, Union, Tuple
import math

class InterferenceAnalyzer:
    def __init__(self, data):
        self.data = data
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ (–ú–ì—Ü)
        self.CHANNEL_WIDTH = 20
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ (–ú–ì—Ü)
        self.MIN_SAFE_DISTANCE = 38  # –ß—É—Ç—å —Å—Ç—Ä–æ–∂–µ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ (37 –ú–ì—Ü)
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        self.INTERFERENCE_THRESHOLDS = {
            "critical": 35,  # –°—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º (40) –∏ —Å—Ç—Ä–æ–≥–∏–º (30)
            "high": 28,      # –ë—ã–ª–æ 25 - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 27.47%
            "medium": 15,    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ
            "low": 5
        }
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏
        self.POWER_DECAY = 1.2  # –ë—ã–ª–æ 1.5, –¥–µ–ª–∞–µ–º –ø–æ–º—è–≥—á–µ

    def get_frequency(self, modulation: str, range_name: str, band: str, channel: str) -> Union[float, None]:
        """ –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø–æ –º–æ–¥—É–ª—è—Ü–∏–∏, –¥–∏–∞–ø–∞–∑–æ–Ω—É, –≥—Ä—É–ø–ø–µ –∏ –Ω–æ–º–µ—Ä—É –∫–∞–Ω–∞–ª–∞. """
        return (
            self.data.get(modulation, {})
            .get(range_name, {})
            .get(band, {})
            .get("channels", {})
            .get(channel)
        )

    def calculate_signal_strength(self, distance_mhz: float, bandwidth: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–ª—É –ø–æ–º–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç–æ—Ç–∞–º–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∞—É—Å—Å–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        """
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ - –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
        sigma = bandwidth / 2
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≥–∞—É—Å—Å–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        strength = math.exp(-(distance_mhz ** 2) / (2 * sigma ** 2))
        return round(strength * 100, 2)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è

    def calculate_imd(self, freq1: float, freq2: float) -> Tuple[float, float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä–º–æ–¥—É–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π –¥–ª—è –¥–≤—É—Ö –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        """
        imd1 = (2 * freq1) - freq2
        imd2 = (2 * freq2) - freq1
        return (imd1, imd2)

    def get_interference_category(self, overlap_percent: float) -> Dict[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        """
        if overlap_percent > 70:
            return {
                "category": "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
                "risk": "high",
                "description": "–°–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —á–∞—Å—Ç–æ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
            }
        elif overlap_percent > 40:
            return {
                "category": "üü† –°–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
                "risk": "medium-high",
                "description": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–º–µ—Ö–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª"
            }
        elif overlap_percent > 20:
            return {
                "category": "üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
                "risk": "medium",
                "description": "–í–æ–∑–º–æ–∂–Ω—ã –ø–æ–º–µ—Ö–∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"
            }
        elif overlap_percent > 5:
            return {
                "category": "üü¢ –°–ª–∞–±–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
                "risk": "low",
                "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ–º–µ—Ö"
            }
        else:
            return {
                "category": "‚úÖ –ù–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
                "risk": "none",
                "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"
            }

    def find_best_alternative_channels(self, results: List[Dict], occupied_channels: List[Dict]) -> List[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å —É—á–µ—Ç–æ–º —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        occupied_frequencies = [ch["frequency"] for ch in occupied_channels]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
        safe_channels = [
            r for r in results 
            if r["interference"]["risk"] in ["none", "low"] and
            r["frequency"] not in occupied_frequencies
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ —á–∞—Å—Ç–æ—Ç–µ
        safe_channels.sort(key=lambda x: (
            {"none": 0, "low": 1}[x["interference"]["risk"]], 
            x["frequency"]
        ))
        
        return safe_channels[:3]

    def calculate_imd_products(self, frequencies: List[float], order: int = 3) -> List[float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–Ω—Ç–µ—Ä–º–æ–¥—É–ª—è—Ü–∏–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç–æ—Ç –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤.
        
        Args:
            frequencies: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ—Ç –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
            order: –ü–æ—Ä—è–¥–æ–∫ IMD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3-–≥–æ –ø–æ—Ä—è–¥–∫–∞)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ—Ç IMD-–ø—Ä–æ–¥—É–∫—Ç–æ–≤
        """
        imd_products = set()
        n = len(frequencies)
        
        if order >= 3:
            # IMD3: f1 + f2 - f3
            for i in range(n):
                for j in range(n):
                    for k in range(n):
                        if i != j and j != k and i != k:
                            imd = frequencies[i] + frequencies[j] - frequencies[k]
                            imd_products.add(round(imd, 1))

        if order >= 5:
            # IMD5: 3f1 - 2f2
            for i in range(n):
                for j in range(n):
                    if i != j:
                        imd = 3 * frequencies[i] - 2 * frequencies[j]
                        imd_products.add(round(imd, 1))
                        
        return sorted(list(imd_products))

    def calculate_power_ratio(self, freq1: float, freq2: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—Ö–∏ –∫ –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ—Å–∞.
        """
        freq_separation = abs(freq1 - freq2)
        
        if freq_separation == 0:
            return 1.0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–µ—Ä–µ–Ω–Ω–æ–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        power_ratio = math.exp(-freq_separation * self.POWER_DECAY / self.CHANNEL_WIDTH)
        return round(power_ratio, 4)

    def calculate_total_interference(self, target_freq: float, other_freqs: List[float]) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã
        —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏—Ö IMD –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–∏–∑–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        min_separation = min(abs(target_freq - freq) for freq in other_freqs) if other_freqs else float('inf')
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∑–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        close_channels = sum(1 for freq in other_freqs if abs(target_freq - freq) <= self.MIN_SAFE_DISTANCE * 1.5)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_count = len(other_freqs) + 1
        if channel_count >= 3:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            if close_channels >= 2:
                base_max = 250  # –ë—ã–ª–æ 200 - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
                base_min = 180  # –ë—ã–ª–æ 150
            else:
                base_max = 200  # –ë—ã–ª–æ 180
                base_min = 150  # –ë—ã–ª–æ 120
        else:
            base_max = 130  # –ë—ã–ª–æ 110
            base_min = 80   # –ë—ã–ª–æ 60
        
        # –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if min_separation <= self.MIN_SAFE_DISTANCE:
            interference_multiplier = base_max
        elif min_separation >= self.MIN_SAFE_DISTANCE * 2:
            interference_multiplier = base_min
        else:
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É base_max –∏ base_min
            ratio = (min_separation - self.MIN_SAFE_DISTANCE) / self.MIN_SAFE_DISTANCE
            interference_multiplier = base_max - (70 * ratio)  # –ë–æ–ª–µ–µ —Ä–µ–∑–∫–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø—Ä—è–º—ã—Ö –ø–æ–º–µ—Ö –∏ IMD –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–∏–∑–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        if close_channels >= 2:
            direct_coef = 5  # –ë—ã–ª–æ 4
            imd_coef = 6    # –ë—ã–ª–æ 5
        else:
            direct_coef = 3
            imd_coef = 4
        
        # –†–∞—Å—á–µ—Ç –ø—Ä—è–º—ã—Ö –ø–æ–º–µ—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        direct_interference = sum(
            self.calculate_power_ratio(target_freq, freq) * direct_coef
            for freq in other_freqs
        )
        
        # –†–∞—Å—á–µ—Ç IMD –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        imd_freqs = self.calculate_imd_products([target_freq] + other_freqs)
        imd_interference = sum(
            self.calculate_power_ratio(target_freq, imd_freq) * imd_coef
            for imd_freq in imd_freqs
        )
        
        # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫ 100%)
        total_interference = min(100, (direct_interference + imd_interference) * interference_multiplier)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        risk_level = "none"
        for level, threshold in self.INTERFERENCE_THRESHOLDS.items():
            if total_interference >= threshold:
                risk_level = level
                break
                
        return {
            "total_percent": round(total_interference, 2),
            "risk_level": risk_level,
            "direct_interference": round(direct_interference, 4),
            "imd_interference": round(imd_interference, 4),
            "imd_frequencies": imd_freqs,
            "debug": {
                "min_separation": round(min_separation, 1),
                "multiplier": round(interference_multiplier, 1),
                "channel_count": channel_count,
                "close_channels": close_channels,
                "direct_coef": direct_coef,
                "imd_coef": imd_coef
            }
        }

    def analyze_group_interference(self, channels: List[Dict[str, str]], modulation: str = "analog") -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–Ω—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–æ–≤.
        """
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        channel_info = []
        frequencies = []
        
        for ch_data in channels:
            band = ch_data.get("band")
            channel = ch_data.get("channel")
            range_name = ch_data.get("range", "5.8GHz")
            
            freq = self.get_frequency(modulation, range_name, band, channel)
            if not freq:
                return {"error": f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: band={band}, channel={channel}"}
                
            channel_info.append({
                "band": band,
                "channel": channel,
                "frequency": freq,
                "range": range_name
            })
            frequencies.append(freq)

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–º–µ—Ö
        interference_matrix = []
        for i, ch1 in enumerate(channel_info):
            row = []
            other_freqs = [f for j, f in enumerate(frequencies) if j != i]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–º–µ—Ö–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            interference_data = self.calculate_total_interference(
                ch1["frequency"], 
                other_freqs
            )
            
            ch1.update({
                "interference_level": interference_data["risk_level"],
                "total_interference": interference_data["total_percent"],
                "imd_products": interference_data["imd_frequencies"]
            })
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –º–∞—Ç—Ä–∏—Ü—ã
            for j, ch2 in enumerate(channel_info):
                if i == j:
                    row.append({
                        "interference": 0,
                        "risk_level": "self"
                    })
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–º–µ—Ö
                    pair_interference = self.calculate_total_interference(
                        ch1["frequency"], 
                        [ch2["frequency"]]
                    )
                    row.append({
                        "interference": pair_interference["total_percent"],
                        "risk_level": pair_interference["risk_level"],
                        "separation": abs(ch1["frequency"] - ch2["frequency"]),
                        "debug": pair_interference["debug"]
                    })
            
            interference_matrix.append(row)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
        critical_pairs = []
        for i, row in enumerate(interference_matrix):
            for j, cell in enumerate(row):
                if i != j:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö
                    if (cell.get("separation", 0) < self.MIN_SAFE_DISTANCE or 
                        cell["interference"] >= self.INTERFERENCE_THRESHOLDS["high"]):
                        critical_pairs.append({
                            "channel1": channel_info[i],
                            "channel2": channel_info[j],
                            "interference": cell["interference"],
                            "separation": cell.get("separation", 0)
                        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        min_separation = min(
            abs(ch1["frequency"] - ch2["frequency"])
            for i, ch1 in enumerate(channel_info)
            for j, ch2 in enumerate(channel_info)
            if i < j
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
        max_interference = max(
            cell["interference"]
            for row in interference_matrix
            for cell in row
            if cell["risk_level"] != "self"
        )

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        all_pairs = []
        for i, ch1 in enumerate(channel_info):
            for j, ch2 in enumerate(channel_info):
                if i < j:
                    separation = abs(ch1["frequency"] - ch2["frequency"])
                    interference = interference_matrix[i][j]["interference"]
                    all_pairs.append({
                        "ch1": f"{ch1['band']}{ch1['channel']} ({ch1['frequency']})",
                        "ch2": f"{ch2['band']}{ch2['channel']} ({ch2['frequency']})",
                        "separation": separation,
                        "interference": interference
                    })

        return {
            "channels": channel_info,
            "interference_matrix": interference_matrix,
            "critical_pairs": critical_pairs,
            "analysis": {
                "total_channels": len(channels),
                "max_interference": max_interference,
                "safe_separation": min_separation >= self.MIN_SAFE_DISTANCE and max_interference < self.INTERFERENCE_THRESHOLDS["high"],
                "min_separation": min_separation,
                "debug": {
                    "separations": [
                        abs(ch1["frequency"] - ch2["frequency"])
                        for i, ch1 in enumerate(channel_info)
                        for j, ch2 in enumerate(channel_info)
                        if i < j
                    ],
                    "imd_products": self.calculate_imd_products(frequencies) if len(frequencies) > 2 else [],
                    "all_pairs": all_pairs,
                    "min_safe_distance": self.MIN_SAFE_DISTANCE,
                    "high_threshold": self.INTERFERENCE_THRESHOLDS["high"]
                }
            }
        }

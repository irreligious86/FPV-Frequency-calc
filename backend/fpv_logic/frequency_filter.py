class FrequencyFilter:
    def __init__(self, data):
        self.data = data
        
          # üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print("DEBUG: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ self.data:", type(self.data))  # –ü–æ–∫–∞–∂–µ—Ç, —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(self.data, list):
            print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫! –ü–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:", self.data[:2])  # –ü–æ–∫–∞–∂–µ—Ç –ø–µ—Ä–≤—ã–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        elif isinstance(self.data, dict):
            print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å. –ö–ª—é—á–∏:", list(self.data.keys()))  # –ü–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏

    def filter_by_region(self, region: str):
        """ –§–∏–ª—å—Ç—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —Ä–µ–≥–∏–æ–Ω—É (FCC, CE –∏ —Ç. –¥.). """
        return {
            rng: {
                band: details for band, details in bands.items() if details.get("region") == region
            }
            for rng, bands in self.data.items()
            if any(details.get("region") == region for details in bands.values())
        }

    def filter_by_modulation(self, modulation: str):
        """ –§–∏–ª—å—Ç—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –º–æ–¥—É–ª—è—Ü–∏–∏ (Analog/Digital). """
        return {
            rng: {
                band: details for band, details in bands.items() if details.get("modulation") == modulation
            }
            
            for rng, bands in self.data.items()
            if any(details.get("modulation") == modulation for details in bands.values())
        }

    def filter_by_bandwidth(self, bandwidth: int):
        """ –§–∏–ª—å—Ç—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —à–∏—Ä–∏–Ω–µ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20 MHz). """
        return {
            rng: {
                band: details for band, details in bands.items() if details.get("bandwidth") == bandwidth
            }
            for rng, bands in self.data.items()
            if any(details.get("bandwidth") == bandwidth for details in bands.values())
        }

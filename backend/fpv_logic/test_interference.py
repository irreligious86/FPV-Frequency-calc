import pytest
from .interference import InterferenceAnalyzer

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
TEST_DATA = {
    "analog": {
        "5.8GHz": {
            "R": {
                "channels": {
                    "1": 5658,
                    "2": 5695,
                    "3": 5732,
                    "4": 5769,
                    "5": 5806,
                    "6": 5843,
                    "7": 5880,
                    "8": 5917
                }
            },
            "F": {
                "channels": {
                    "1": 5740,
                    "2": 5760,
                    "3": 5780,
                    "4": 5800,
                    "5": 5820,
                    "6": 5840,
                    "7": 5860,
                    "8": 5880
                }
            }
        }
    }
}

@pytest.fixture
def analyzer():
    return InterferenceAnalyzer(TEST_DATA)

def test_catastrophic_channel_selection(analyzer):
    """
    –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª - –∫–æ–≥–¥–∞ –ø–∏–ª–æ—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã 
    –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –º–µ—Å—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–∫–µ üöå
    """
    channels = [
        {"band": "R", "channel": "1"},  # 5658
        {"band": "R", "channel": "2"},  # 5695
        {"band": "R", "channel": "3"},  # 5732
    ]
    
    result = analyzer.analyze_group_interference(channels)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\nDEBUG INFO:")
    print(f"Min safe distance: {result['analysis']['debug']['min_safe_distance']} MHz")
    print(f"High threshold: {result['analysis']['debug']['high_threshold']}%")
    print(f"Max interference: {result['analysis']['max_interference']}%")
    print("\nChannel pairs:")
    for pair in result["analysis"]["debug"]["all_pairs"]:
        print(f"{pair['ch1']} -> {pair['ch2']}: {pair['separation']} MHz, {pair['interference']}% interference")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ üî•
    assert result["analysis"]["safe_separation"] == False
    assert result["analysis"]["max_interference"] > 40
    assert len(result["critical_pairs"]) > 0

def test_smart_channel_selection(analyzer):
    """
    –¢–µ—Å—Ç –Ω–∞ —É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ - 
    –∫–æ–≥–¥–∞ –ø–∏–ª–æ—Ç—ã –Ω–µ —Å–ø—è—Ç –Ω–∞ –ª–µ–∫—Ü–∏—è—Ö –ø–æ —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–µ üìö
    """
    channels = [
        {"band": "R", "channel": "1"},  # 5658
        {"band": "R", "channel": "4"},  # 5769
        {"band": "R", "channel": "7"},  # 5880
    ]
    
    result = analyzer.analyze_group_interference(channels)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ üåà
    assert result["analysis"]["safe_separation"] == True
    assert result["analysis"]["max_interference"] < 25
    assert len(result["critical_pairs"]) == 0

def test_imd_nightmare(analyzer):
    """
    –¢–µ—Å—Ç –Ω–∞ –∫–æ–≤–∞—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–º–æ–¥—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è -
    –∫–æ–≥–¥–∞ —á–∞—Å—Ç–æ—Ç—ã –∫–∞–∂—É—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏, –Ω–æ IMD —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ—á–µ—Ä–∏–Ω–∫—É üéâ
    """
    channels = [
        {"band": "F", "channel": "2"},  # 5760
        {"band": "F", "channel": "4"},  # 5800
        {"band": "F", "channel": "6"},  # 5840
    ]
    
    result = analyzer.analyze_group_interference(channels)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IMD –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
    for channel in result["channels"]:
        assert len(channel["imd_products"]) > 0
        
    # –ò –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
    assert result["analysis"]["max_interference"] > 15

def test_mixed_bands_wisdom(analyzer):
    """
    –¢–µ—Å—Ç –Ω–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –±–∞–Ω–¥–æ–≤ - 
    –∫–æ–≥–¥–∞ –ø–∏–ª–æ—Ç—ã –∑–Ω–∞—é—Ç, —á—Ç–æ R –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ–Ω–æ–∫ üèÅ
    """
    channels = [
        {"band": "R", "channel": "2"},  # 5695
        {"band": "F", "channel": "4"},  # 5800
        {"band": "R", "channel": "6"},  # 5843
    ]
    
    result = analyzer.analyze_group_interference(channels)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\nDEBUG INFO:")
    print(f"Min safe distance: {result['analysis']['debug']['min_safe_distance']} MHz")
    print(f"High threshold: {result['analysis']['debug']['high_threshold']}%")
    print(f"Max interference: {result['analysis']['max_interference']}%")
    print("\nChannel pairs:")
    for pair in result["analysis"]["debug"]["all_pairs"]:
        print(f"{pair['ch1']} -> {pair['ch2']}: {pair['separation']} MHz, {pair['interference']}% interference")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ –±–∞–Ω–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert result["analysis"]["safe_separation"] == True
    assert result["analysis"]["max_interference"] < 30

def test_power_ratio_physics(analyzer):
    """
    –¢–µ—Å—Ç –Ω–∞ —Ñ–∏–∑–∏–∫—É –∑–∞—Ç—É—Ö–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ -
    –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–∫–æ–Ω—ã —Ñ–∏–∑–∏–∫–∏ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–ª üî¨
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö
    ratio_close = analyzer.calculate_power_ratio(5800, 5820)
    ratio_medium = analyzer.calculate_power_ratio(5800, 5860)
    ratio_far = analyzer.calculate_power_ratio(5800, 5945)
    
    # –ß–µ–º –¥–∞–ª—å—à–µ, —Ç–µ–º —Å–ª–∞–±–µ–µ –ø–æ–º–µ—Ö–∏
    assert ratio_close > ratio_medium > ratio_far
    assert ratio_far < 0.1  # –ù–∞ –±–æ–ª—å—à–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–º–µ—Ö–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã 